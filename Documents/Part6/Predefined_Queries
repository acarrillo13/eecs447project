-- available books within a genre
SELECT B.media_id, B.title, B.author
FROM Book B
LEFT JOIN checks_out C ON B.media_id = C.media_id AND C.return_date IS NULL
WHERE C.checkout_id IS NULL
  AND B.is_reserved = FALSE
  AND B.genre = 'Mystery';

-- frequent borrowers according to genre
SELECT U.user_id, U.username, COUNT(*) AS borrow_count
FROM checks_out C
JOIN Book B ON C.media_id = B.media_id
JOIN User U ON C.user_id = U.user_id
WHERE B.genre = 'Fiction'
  AND C.checkout_date >= CURDATE() - INTERVAL 1 YEAR
GROUP BY U.user_id, U.username
ORDER BY borrow_count DESC;

-- most popular author in the last mont
SELECT B.author, COUNT(*) AS borrow_count
FROM checks_out C
JOIN Book B ON C.media_id = B.media_id
WHERE C.checkout_date >= CURDATE() - INTERVAL 1 MONTH
GROUP BY B.author
ORDER BY borrow_count DESC
LIMIT 1;

-- Avg borrow time per genre (mystery used as example)
SELECT B.genre, AVG(DATEDIFF(C.return_date, C.checkout_date)) AS avg_borrow_days
FROM checks_out C
JOIN Book B ON C.media_id = B.media_id
WHERE C.return_date IS NOT NULL
  AND B.genre = 'Mystery'
GROUP BY B.genre;

-- all users with an overdue book
SELECT U.username, B.title, C.due_date
FROM checks_out C
JOIN Book B ON C.media_id = B.media_id
JOIN User U ON C.user_id = U.user_id
WHERE C.return_date IS NULL
  AND C.due_date < CURDATE();

-- all users with an overdue media
SELECT user_id, media_id, due_date
FROM checks_out 
WHERE return_date IS NULL
  AND due_date < CURDATE();

-- all books due in the next week
SELECT B.title, U.username, C.due_date
FROM checks_out C
JOIN Book B ON C.media_id = B.media_id
JOIN User U ON C.user_id = U.user_id
WHERE C.return_date IS NULL
  AND C.due_date BETWEEN CURDATE() AND CURDATE() + INTERVAL 7 DAY
ORDER BY C.due_date;

-- all media due in a week
SELECT user_id, media_id, due_date
FROM checks_out
WHERE return_date IS NULL
  AND due_date BETWEEN CURDATE() AND CURDATE() + INTERVAL 7 DAY
ORDER BY due_date;


--Find all users and their checkouts where they returned something late and they haven't paid the late fee yet
select C.user_id, C.checkout_id
from checks_out C
where return_date > due_date
and C.checkout_id not in (select P.checkout_id from pays_for P);

-- All active checked out books
SELECT * FROM checks_out
WHERE return_date IS NULL;


-- All over due items
SELECT * FROM checks_out
WHERE return_date IS NULL AND due_date < CURDATE();


-- To get all the check_outs from the user in the last month
SELECT *
FROM checks_out
WHERE user_id = ? 
  AND checkout_date >= CURDATE() - INTERVAL 1 MONTH;


-- To see how many times a piece of DigitalMedia has been downloaded
SELECT COUNT(*)
FROM downloads
WHERE media_id = ?;

-- This assumes that we will charge the user $1 for every day overdue
-- To caclulate all the users current fees 
SELECT user_id, media_id, DATEDIFF(CURDATE(), due_date)) AS overdue_amount
FROM checks_out
WHERE due_date < CURDATE() 
AND return_date is null
AND user_id = ?;

-- to get fees for all users 
SELECT user_id, SUM(DATEDIFF(CURDATE(), due_date) AS total
FROM checks_out
WHERE due_date < CURDATE()
  AND return_date IS NULL
GROUP BY user_id
ORDER BY total;

-- To get all the ____ from the ___ type of media
SELECT *
FROM Book;

SELECT *
FROM Movie;

SELECT *
FROM Magazine

SELECT * 
FROM DigitalMedia

-- To get all the users checked out media
SELECT c.user_id, c.media_id, 'Book' AS media_type, b.title, b.genre, NULL AS director, NULL AS publisher
FROM checks_out c
JOIN Book b ON c.media_id = b.media_id
WHERE c.user_id = ?

UNION ALL

SELECT c.user_id, c.media_id, 'Movie' AS media_type, mv.title, mv.genre, mv.director, mv.publisher
FROM checks_out c
JOIN Movie mv ON c.media_id = mv.media_id
WHERE c.user_id = ?

UNION ALL

SELECT c.user_id, c.media_id, 'Magazine' AS media_type, mg.title, mg.genre, NULL AS director, mg.publication AS publisher
FROM checks_out c
JOIN Magazine mg ON c.media_id = mg.media_id
WHERE c.user_id = ?

UNION ALL

SELECT d.user_id, d.media_id, 'DigitalMedia' AS media_type, dm.title, dm.genre, NULL AS director, dm.publisher
FROM downloads d
JOIN DigitalMedia dm ON d.media_id = dm.media_id
WHERE d.user_id = ?;

--Users who have never checked anything out 
SELECT u.user_id, u.username
FROM User u
LEFT JOIN checks_out c ON u.user_id = c.user_id
WHERE c.user_id IS NULL;

-- top 5 most downloaded content
SELECT dm.title, COUNT(*) AS download_count
FROM downloads d
JOIN DigitalMedia dm ON d.media_id = dm.media_id
GROUP BY d.media_id
ORDER BY download_count DESC
LIMIT 5;

-- all reserved items
SELECT r.user_id, r.media_id, r.reserve_start, r.reserve_end
FROM reserves r
WHERE reserve_end IS NULL OR reserve_end > CURDATE();

-- Find a users total fees paid
select user_id, sum(amount) as total_fees
from pays_for
where user_id = ?;

-- all unpaid for late/overdue books
select user_id, checkout_id
from checks_out
where (return_date > due_date OR (return_date is null AND CURRENT_DATE > due_date))
AND checkout_id NOT IN (select checkout_id from pays_for);

-- all paid for late
select user_id, checkout_id
from checks_out
where return_date > due_date
AND checkout_id IN (select checkout_id from pays_for);

-- all reservations that can be filled 
SELECT r.*
FROM reserves r
WHERE r.reserve_start = (
    SELECT MIN(r2.reserve_start)
    FROM reserves r2
    WHERE r2.media_id = r.media_id
)
AND NOT EXISTS (
    SELECT 1
    FROM checks_out c
    WHERE c.media_id = r.media_id
    AND c.return_date IS NULL
)
AND reserve_end is NULL;
